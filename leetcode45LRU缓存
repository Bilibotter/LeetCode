# import collections


# 每个人都是一个套路导致评分很低
# 最终还是找到最快的了，超越91.23%
class LRUCache:

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.capacity = capacity
        self.my = collections.OrderedDict()

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key not in self.my:
            return -1
        else:
            self.my[key] = self.my.pop(key)
            return self.my[key]

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: void
        """
        if key in self.my:
            self.my.pop(key)
        elif len(self.my) == self.capacity:
            self.my.popitem(last=False)
        self.my[key] = value


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
cache = LRUCache(2)
cache.put(1, 1)
cache.put(2, 2)
cache.get(1)
cache.put(3, 3)
print(cache.dic)
print(cache.stack)
cache.get(2)
cache.put(4, 4)
print(cache.dic)
print(cache.stack)
cache.get(1)
cache.get(3)
print(cache.dic)
print(cache.stack)
cache.get(4)
